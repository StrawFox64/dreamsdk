diff -ruN kos-ports/config.mk kos-ports-offline/config.mk
--- kos-ports/config.mk	2020-02-18 22:20:27 +0000
+++ kos-ports-offline/config.mk	2020-02-18 21:39:24 +0000
@@ -1,23 +1,23 @@
-# Select how to download files inside the kos-ports tree. Examples are given for
-# cURL and wget.
-FETCH_CMD = curl --progress-bar -O
-#FETCH_CMD = wget --progress=bar
-
-# Set the command that will be used for extracting archive files. Currently this
-# only must extract .tar.gz archives (although the default will handle more than
-# that, most likely).
-UNPACK_CMD = tar xf
-
-# Select whether or not to automatically build library dependencies if they are
-# not already installed. If this is set to false, then the build system will
-# simply output an error message if a dependency is not met. If set to true,
-# then the build system will automatically try to build any unmet dependencies
-# recursively.
-BUILD_DEPENDS = true
-
-# Select whether or not to validate each file downloaded before unpacking them.
-# This requires Python to be installed.
-VALIDATE_DISTFILES = true
-
-# Autotools host triple. This should generally be the same as the KOS host.
-AUTOTOOLS_HOST = $(KOS_CC_PREFIX)
+# Select how to download files inside the kos-ports tree. Examples are given for
+# cURL and wget.
+#FETCH_CMD = curl --progress-bar -O
+FETCH_CMD = wget --progress=bar --no-check-certificate
+
+# Set the command that will be used for extracting archive files. Currently this
+# only must extract .tar.gz archives (although the default will handle more than
+# that, most likely).
+UNPACK_CMD = tar xf
+
+# Select whether or not to automatically build library dependencies if they are
+# not already installed. If this is set to false, then the build system will
+# simply output an error message if a dependency is not met. If set to true,
+# then the build system will automatically try to build any unmet dependencies
+# recursively.
+BUILD_DEPENDS = true
+
+# Select whether or not to validate each file downloaded before unpacking them.
+# This requires Python to be installed.
+VALIDATE_DISTFILES = true
+
+# Autotools host triple. This should generally be the same as the KOS host.
+AUTOTOOLS_HOST = $(KOS_CC_PREFIX)
diff -ruN kos-ports/scripts/download.mk kos-ports-offline/scripts/download.mk
--- kos-ports/scripts/download.mk	2020-02-18 22:20:43 +0000
+++ kos-ports-offline/scripts/download.mk	2020-02-18 21:39:24 +0000
@@ -1,70 +1,70 @@
-# kos-ports ##version##
-#
-# scripts/download.mk
-# Copyright (C) 2015 Lawrence Sebald
-#
-
-fetch:
-	@if [ ! -d "dist" ] ; then \
-		mkdir dist ; \
-	fi
-
-	@cd dist ; \
-	for _file in ${DOWNLOAD_FILES}; do \
-		if [ ! -f "$$_file" ] ; then \
-			if [ -n "${DOWNLOAD_SITES}" ] ; then \
-				for _site in ${DOWNLOAD_SITES}; do \
-					echo "Fetching $$_file from $$_site ..." ; \
-					file="$$_site/$$_file" ; \
-					${FETCH_CMD} $$file ; \
-					if [ "$$?" -eq 0 ] ; then \
-						break; \
-					fi ; \
-				done ; \
-			else \
-				echo "Fetching $$_file from ${DOWNLOAD_SITE} ..." ; \
-				file="${DOWNLOAD_SITE}/$$_file" ; \
-				${FETCH_CMD} $$file ; \
-			fi ; \
-		fi ; \
-	done
-
-	@if [ -z "${DOWNLOAD_FILES}" ] ; then \
-		cd dist ; \
-		if [ -n "${GIT_REPOSITORY}" ] ; then \
-			if [ ! -d "${PORTNAME}-${PORTVERSION}" ] ; then \
-				echo "Fetching ${PORTNAME} from ${GIT_REPOSITORY} ..." ; \
-				if [ -n "${GIT_BRANCH}" ] ; then \
-					git clone ${GIT_REPOSITORY} --branch ${GIT_BRANCH} --single-branch ${PORTNAME}-${PORTVERSION} ; \
-				else \
-					git clone ${GIT_REPOSITORY} ${PORTNAME}-${PORTVERSION} ; \
-				fi ; \
-			else \
-				echo "Updating ${PORTNAME} from ${GIT_REPOSITORY} ..." ; \
-				cd ${PORTNAME}-${PORTVERSION} ; \
-				git pull ; \
-				cd .. ; \
-			fi ; \
-			if [ -n "${GIT_CHANGESET}" ] ; then \
-				cd ${PORTNAME}-${PORTVERSION} ; \
-				git reset --hard ${GIT_CHANGESET} ; \
-			fi ; \
-		elif [ -n "${SVN_REPOSITORY}" ] ; then \
-			if [ ! -d "${PORTNAME}-${PORTVERSION}" ] ; then \
-				echo "Fetching ${PORTNAME} from ${SVN_REPOSITORY} ..." ; \
-				if [ -n "${SVN_REVISION}" ] ; then \
-					svn checkout ${SVN_REPOSITORY} -r ${SVN_REVISION} ${PORTNAME}-${PORTVERSION} ; \
-				else \
-					svn checkout ${SVN_REPOSITORY} ${PORTNAME}-${PORTVERSION} ; \
-				fi ; \
-			else \
-				echo "Updating ${PORTNAME} from ${SVN_REPOSITORY} ..." ; \
-				cd ${PORTNAME}-${PORTVERSION} ; \
-				if [ -n "${SVN_REVISION}" ] ; then \
-					svn update -r "${SVN_REVISION}" ; \
-				else \
-					svn update ; \
-				fi ; \
-			fi ; \
-		fi ; \
-	fi
+# kos-ports ##version##
+#
+# scripts/download.mk
+# Copyright (C) 2015 Lawrence Sebald
+#
+
+fetch:
+	@if [ ! -d "dist" ] ; then \
+		mkdir dist ; \
+	fi
+
+	@cd dist ; \
+	for _file in ${DOWNLOAD_FILES}; do \
+		if [ ! -f "$$_file" ] ; then \
+			if [ -n "${DOWNLOAD_SITES}" ] ; then \
+				for _site in ${DOWNLOAD_SITES}; do \
+					echo "Fetching $$_file from $$_site ..." ; \
+					file="$$_site/$$_file" ; \
+					${FETCH_CMD} $$file ; \
+					if [ "$$?" -eq 0 ] ; then \
+						break; \
+					fi ; \
+				done ; \
+			else \
+				echo "Fetching $$_file from ${DOWNLOAD_SITE} ..." ; \
+				file="${DOWNLOAD_SITE}/$$_file" ; \
+				${FETCH_CMD} $$file ; \
+			fi ; \
+		fi ; \
+	done
+
+	@if [ -z "${DOWNLOAD_FILES}" ] ; then \
+		cd dist ; \
+		if [ -n "${GIT_REPOSITORY}" ] ; then \
+			if [ ! -d "${PORTNAME}-${PORTVERSION}" ] ; then \
+				echo "Fetching ${PORTNAME} from ${GIT_REPOSITORY} ..." ; \
+				if [ -n "${GIT_BRANCH}" ] ; then \
+					git clone ${GIT_REPOSITORY} --branch ${GIT_BRANCH} --single-branch ${PORTNAME}-${PORTVERSION} ; \
+				else \
+					git clone ${GIT_REPOSITORY} ${PORTNAME}-${PORTVERSION} ; \
+				fi ; \
+			else \
+				echo "Updating ${PORTNAME} from ${GIT_REPOSITORY} ..." ; \
+				cd ${PORTNAME}-${PORTVERSION} ; \
+				git pull ; \
+				cd .. ; \
+			fi ; \
+			if [ -n "${GIT_CHANGESET}" ] ; then \
+				cd ${PORTNAME}-${PORTVERSION} ; \
+				git reset --hard ${GIT_CHANGESET} ; \
+			fi ; \
+		elif [ -n "${SVN_REPOSITORY}" ] ; then \
+			if [ ! -d "${PORTNAME}-${PORTVERSION}" ] ; then \
+				echo "Fetching ${PORTNAME} from ${SVN_REPOSITORY} ..." ; \
+				if [ -n "${SVN_REVISION}" ] ; then \
+					svn checkout --non-interactive --trust-server-cert ${SVN_REPOSITORY} -r ${SVN_REVISION} ${PORTNAME}-${PORTVERSION} ; \
+				else \
+					svn checkout --non-interactive --trust-server-cert ${SVN_REPOSITORY} ${PORTNAME}-${PORTVERSION} ; \
+				fi ; \
+			else \
+				echo "Updating ${PORTNAME} from ${SVN_REPOSITORY} ..." ; \
+				cd ${PORTNAME}-${PORTVERSION} ; \
+				if [ -n "${SVN_REVISION}" ] ; then \
+					svn update -r "${SVN_REVISION}" ; \
+				else \
+					svn update ; \
+				fi ; \
+			fi ; \
+		fi ; \
+	fi
diff -ruN kos-ports/utils/fetch-all.sh kos-ports-offline/utils/fetch-all.sh
--- kos-ports/utils/fetch-all.sh	1970-01-01 00:00:00 +0000
+++ kos-ports-offline/utils/fetch-all.sh	2020-02-18 22:24:20 +0000
@@ -0,0 +1,10 @@
+#!/bin/sh
+# KallistiOS Ports Offline Downloader
+for _dir in ../* ; do
+    if [ -d "${_dir}" ] ; then
+        if [ -f "${_dir}/Makefile" ] ; then
+            echo "Fetching in ${_dir}..."
+            ${KOS_MAKE} -C "${_dir}" clean fetch
+        fi
+    fi
+done
